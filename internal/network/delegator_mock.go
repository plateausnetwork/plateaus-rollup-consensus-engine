// Code generated by MockGen. DO NOT EDIT.
// Source: delegator.go

// Package network is a generated GoMock package.
package network

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	hash "github.com/rhizomplatform/plateaus-rollup-consensus-engine/internal/hash"
	nft "github.com/rhizomplatform/plateaus-rollup-consensus-engine/internal/lottery/nft"
)

// MockDelegated is a mock of Delegated interface.
type MockDelegated struct {
	ctrl     *gomock.Controller
	recorder *MockDelegatedMockRecorder
}

// MockDelegatedMockRecorder is the mock recorder for MockDelegated.
type MockDelegatedMockRecorder struct {
	mock *MockDelegated
}

// NewMockDelegated creates a new mock instance.
func NewMockDelegated(ctrl *gomock.Controller) *MockDelegated {
	mock := &MockDelegated{ctrl: ctrl}
	mock.recorder = &MockDelegatedMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDelegated) EXPECT() *MockDelegatedMockRecorder {
	return m.recorder
}

// GetAccountBalance mocks base method.
func (m *MockDelegated) GetAccountBalance() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountBalance")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountBalance indicates an expected call of GetAccountBalance.
func (mr *MockDelegatedMockRecorder) GetAccountBalance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountBalance", reflect.TypeOf((*MockDelegated)(nil).GetAccountBalance))
}

// GetNetworkName mocks base method.
func (m *MockDelegated) GetNetworkName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNetworkName indicates an expected call of GetNetworkName.
func (mr *MockDelegatedMockRecorder) GetNetworkName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkName", reflect.TypeOf((*MockDelegated)(nil).GetNetworkName))
}

// MintNFT mocks base method.
func (m *MockDelegated) MintNFT(hash hash.Hash, lotteryValidation *nft.LotteryValidation, url string, minHeight, maxHeight int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MintNFT", hash, lotteryValidation, url, minHeight, maxHeight)
	ret0, _ := ret[0].(error)
	return ret0
}

// MintNFT indicates an expected call of MintNFT.
func (mr *MockDelegatedMockRecorder) MintNFT(hash, lotteryValidation, url, minHeight, maxHeight interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MintNFT", reflect.TypeOf((*MockDelegated)(nil).MintNFT), hash, lotteryValidation, url, minHeight, maxHeight)
}

// Supports mocks base method.
func (m *MockDelegated) Supports(network string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Supports", network)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Supports indicates an expected call of Supports.
func (mr *MockDelegatedMockRecorder) Supports(network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Supports", reflect.TypeOf((*MockDelegated)(nil).Supports), network)
}

// WasMinted mocks base method.
func (m *MockDelegated) WasMinted(hash hash.Hash) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WasMinted", hash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WasMinted indicates an expected call of WasMinted.
func (mr *MockDelegatedMockRecorder) WasMinted(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WasMinted", reflect.TypeOf((*MockDelegated)(nil).WasMinted), hash)
}
