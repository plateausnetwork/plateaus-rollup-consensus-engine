// Code generated by MockGen. DO NOT EDIT.
// Source: hash.go

// Package hash is a generated GoMock package.
package hash

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGenerator is a mock of Generator interface.
type MockGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockGeneratorMockRecorder
}

// MockGeneratorMockRecorder is the mock recorder for MockGenerator.
type MockGeneratorMockRecorder struct {
	mock *MockGenerator
}

// NewMockGenerator creates a new mock instance.
func NewMockGenerator(ctrl *gomock.Controller) *MockGenerator {
	mock := &MockGenerator{ctrl: ctrl}
	mock.recorder = &MockGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenerator) EXPECT() *MockGeneratorMockRecorder {
	return m.recorder
}

// GenerateByCollection mocks base method.
func (m *MockGenerator) GenerateByCollection(elements *[]string) (Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateByCollection", elements)
	ret0, _ := ret[0].(Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateByCollection indicates an expected call of GenerateByCollection.
func (mr *MockGeneratorMockRecorder) GenerateByCollection(elements interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateByCollection", reflect.TypeOf((*MockGenerator)(nil).GenerateByCollection), elements)
}

// GenerateByMap mocks base method.
func (m *MockGenerator) GenerateByMap(elements *map[string]string) (*map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateByMap", elements)
	ret0, _ := ret[0].(*map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateByMap indicates an expected call of GenerateByMap.
func (mr *MockGeneratorMockRecorder) GenerateByMap(elements interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateByMap", reflect.TypeOf((*MockGenerator)(nil).GenerateByMap), elements)
}
