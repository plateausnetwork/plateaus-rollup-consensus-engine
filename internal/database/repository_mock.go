// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package database is a generated GoMock package.
package database

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDataReader is a mock of DataReader interface.
type MockDataReader struct {
	ctrl     *gomock.Controller
	recorder *MockDataReaderMockRecorder
}

// MockDataReaderMockRecorder is the mock recorder for MockDataReader.
type MockDataReaderMockRecorder struct {
	mock *MockDataReader
}

// NewMockDataReader creates a new mock instance.
func NewMockDataReader(ctrl *gomock.Controller) *MockDataReader {
	mock := &MockDataReader{ctrl: ctrl}
	mock.recorder = &MockDataReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataReader) EXPECT() *MockDataReaderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockDataReader) Get() (*Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(*Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDataReaderMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDataReader)(nil).Get))
}

// MockDataWriter is a mock of DataWriter interface.
type MockDataWriter struct {
	ctrl     *gomock.Controller
	recorder *MockDataWriterMockRecorder
}

// MockDataWriterMockRecorder is the mock recorder for MockDataWriter.
type MockDataWriterMockRecorder struct {
	mock *MockDataWriter
}

// NewMockDataWriter creates a new mock instance.
func NewMockDataWriter(ctrl *gomock.Controller) *MockDataWriter {
	mock := &MockDataWriter{ctrl: ctrl}
	mock.recorder = &MockDataWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataWriter) EXPECT() *MockDataWriterMockRecorder {
	return m.recorder
}

// Store mocks base method.
func (m *MockDataWriter) Store(d *Data) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", d)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockDataWriterMockRecorder) Store(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockDataWriter)(nil).Store), d)
}

// MockDataRepository is a mock of DataRepository interface.
type MockDataRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDataRepositoryMockRecorder
}

// MockDataRepositoryMockRecorder is the mock recorder for MockDataRepository.
type MockDataRepositoryMockRecorder struct {
	mock *MockDataRepository
}

// NewMockDataRepository creates a new mock instance.
func NewMockDataRepository(ctrl *gomock.Controller) *MockDataRepository {
	mock := &MockDataRepository{ctrl: ctrl}
	mock.recorder = &MockDataRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataRepository) EXPECT() *MockDataRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockDataRepository) Get() (*Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(*Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDataRepositoryMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDataRepository)(nil).Get))
}

// Store mocks base method.
func (m *MockDataRepository) Store(d *Data) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", d)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockDataRepositoryMockRecorder) Store(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockDataRepository)(nil).Store), d)
}
