// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package plateaus is a generated GoMock package.
package plateaus

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// GetLatestBlock mocks base method.
func (m *MockHTTPClient) GetLatestBlock() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestBlock")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestBlock indicates an expected call of GetLatestBlock.
func (mr *MockHTTPClientMockRecorder) GetLatestBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestBlock", reflect.TypeOf((*MockHTTPClient)(nil).GetLatestBlock))
}

// GetTransactions mocks base method.
func (m *MockHTTPClient) GetTransactions(minHeight, maxHeight, offset, limit int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", minHeight, maxHeight, offset, limit)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockHTTPClientMockRecorder) GetTransactions(minHeight, maxHeight, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockHTTPClient)(nil).GetTransactions), minHeight, maxHeight, offset, limit)
}

// MockRPCClient is a mock of RPCClient interface.
type MockRPCClient struct {
	ctrl     *gomock.Controller
	recorder *MockRPCClientMockRecorder
}

// MockRPCClientMockRecorder is the mock recorder for MockRPCClient.
type MockRPCClientMockRecorder struct {
	mock *MockRPCClient
}

// NewMockRPCClient creates a new mock instance.
func NewMockRPCClient(ctrl *gomock.Controller) *MockRPCClient {
	mock := &MockRPCClient{ctrl: ctrl}
	mock.recorder = &MockRPCClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPCClient) EXPECT() *MockRPCClientMockRecorder {
	return m.recorder
}

// GetLotteryWinners mocks base method.
func (m *MockRPCClient) GetLotteryWinners() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLotteryWinners")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLotteryWinners indicates an expected call of GetLotteryWinners.
func (mr *MockRPCClientMockRecorder) GetLotteryWinners() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLotteryWinners", reflect.TypeOf((*MockRPCClient)(nil).GetLotteryWinners))
}

// IsClosed mocks base method.
func (m *MockRPCClient) IsClosed(date time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClosed", date)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsClosed indicates an expected call of IsClosed.
func (mr *MockRPCClientMockRecorder) IsClosed(date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClosed", reflect.TypeOf((*MockRPCClient)(nil).IsClosed), date)
}

// IsOpen mocks base method.
func (m *MockRPCClient) IsOpen(date time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOpen", date)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOpen indicates an expected call of IsOpen.
func (mr *MockRPCClientMockRecorder) IsOpen(date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOpen", reflect.TypeOf((*MockRPCClient)(nil).IsOpen), date)
}

// PickWinner mocks base method.
func (m *MockRPCClient) PickWinner() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PickWinner")
	ret0, _ := ret[0].(error)
	return ret0
}

// PickWinner indicates an expected call of PickWinner.
func (mr *MockRPCClientMockRecorder) PickWinner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PickWinner", reflect.TypeOf((*MockRPCClient)(nil).PickWinner))
}

// Subscribe mocks base method.
func (m *MockRPCClient) Subscribe(network string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", network)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockRPCClientMockRecorder) Subscribe(network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockRPCClient)(nil).Subscribe), network)
}

// WasPicked mocks base method.
func (m *MockRPCClient) WasPicked() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WasPicked")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WasPicked indicates an expected call of WasPicked.
func (mr *MockRPCClientMockRecorder) WasPicked() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WasPicked", reflect.TypeOf((*MockRPCClient)(nil).WasPicked))
}
