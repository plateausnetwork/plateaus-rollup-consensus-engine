// Code generated by MockGen. DO NOT EDIT.
// Source: subscriber.go

// Package lottery is a generated GoMock package.
package lottery

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSubscriber is a mock of Subscriber interface.
type MockSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriberMockRecorder
}

// MockSubscriberMockRecorder is the mock recorder for MockSubscriber.
type MockSubscriberMockRecorder struct {
	mock *MockSubscriber
}

// NewMockSubscriber creates a new mock instance.
func NewMockSubscriber(ctrl *gomock.Controller) *MockSubscriber {
	mock := &MockSubscriber{ctrl: ctrl}
	mock.recorder = &MockSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriber) EXPECT() *MockSubscriberMockRecorder {
	return m.recorder
}

// GetLatestBlock mocks base method.
func (m *MockSubscriber) GetLatestBlock() (*LatestBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestBlock")
	ret0, _ := ret[0].(*LatestBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestBlock indicates an expected call of GetLatestBlock.
func (mr *MockSubscriberMockRecorder) GetLatestBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestBlock", reflect.TypeOf((*MockSubscriber)(nil).GetLatestBlock))
}

// IsAvailable mocks base method.
func (m *MockSubscriber) IsAvailable(latestBlock *LatestBlock) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAvailable", latestBlock)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAvailable indicates an expected call of IsAvailable.
func (mr *MockSubscriberMockRecorder) IsAvailable(latestBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAvailable", reflect.TypeOf((*MockSubscriber)(nil).IsAvailable), latestBlock)
}

// Subscribe mocks base method.
func (m *MockSubscriber) Subscribe(height int, peer string, networks []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", height, peer, networks)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSubscriberMockRecorder) Subscribe(height, peer, networks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSubscriber)(nil).Subscribe), height, peer, networks)
}
